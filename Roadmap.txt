Roadmap for CX-Hibernate
========================

Already done:
-------------
Version 0.5: Stable 1-class = 1-table database engine
Version 0.6: HTTP Internet role
Version 0.7: Follow associations
Version 0.8: Derived classes in one-table strategy
Version 0.9: Derived classes in their own table

Still to do:
------------
Version 1.0: First stable version + Documentation


Features that will not go into 1.0
But will be implemented in a later version
------------------------------------------
- Naming the discriminator attribute other than "Discriminator"
- Setting the size of the discriminator other than a maximum of "5"
- Other generators than a native database "SEQUENCE"
- Other generator names than "<classname>_seq"
- Greater cache control. Especially on the second line cache
- many-to-many associations
- mapping strategy not global but in each super-class of it's one
  (also kwown as union-classes)
- Start / Commit / Rollback transactions on an internet store

Features from (N)Hibernate that will NEVER be implemented:
----------------------------------------------------------
- Lazy loading: too many runtime problems at customer sites
- HQL (Hibernate Query Language) : The payback is to small,
  and the confusion is too great.
- Automatic reflection: Sadly this cannot be done in C++,
  but pending requests on the ISO C++ commities exist.

Features under consideration
----------------------------
- Runtime reflection by calculation dereference pointer differences
  as in the following offset:
  long offset = ((void*)object.m_attribute) - ((void*)object)
  This could create the desired meta data for reflection
